// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9WZxc9ETCwDp4rSGaS5CbS
// Component: 4wyMl17eEwGh
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Section from "../../Section"; // plasmic-import: rgiRB26vdynw/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import { useScreenVariants as useScreenVariants_5FfeMn0I1Ziv } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 5FfeMN0i1Ziv/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: 9WZxc9ETCwDp4rSGaS5CbS/projectcss
import sty from "./PlasmicCarousel.module.css"; // plasmic-import: 4wyMl17eEwGh/css
import image2Mg8N0AfDxjf4 from "./images/image2.png"; // plasmic-import: MG8n0AfDxjf4/picture
import image5GlOn2FcWZsY from "./images/image.png"; // plasmic-import: 5GlOn2fcWZsY/picture

createPlasmicElementProxy;

export const PlasmicCarousel__VariantProps = new Array();

export const PlasmicCarousel__ArgProps = new Array(
  "onHostlessSliderInitialSlideChange"
);

const $$ = {};

function PlasmicCarousel__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "readonly",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,
        onChangeProp: "onHostlessSliderInitialSlideChange",
        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_5FfeMn0I1Ziv()
  });
  return (
    <Section
      data-plasmic-name={"carouselBody"}
      data-plasmic-override={overrides.carouselBody}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.carouselBody)}
      size={
        hasVariant(globalVariants, "screen", "mobileOnly")
          ? "mobile"
          : undefined
      }
    >
      {(() => {
        const child$Props = {
          arrows: false,
          autoplay: true,
          autoplaySpeed: 9,
          beforeChange: generateStateOnChangePropForCodeComponents(
            $state,
            "currentSlide",
            ["sliderCarousel", "currentSlide"],
            SliderWrapper_Helpers
          ),
          centerMode: true,
          className: classNames("__wab_instance", sty.sliderCarousel),
          cssEase: "linear",
          initialSlide: generateStateValueProp($state, [
            "sliderCarousel",
            "currentSlide"
          ]),
          ref: ref => {
            $refs["sliderCarousel"] = ref;
          },
          sliderScopeClassName: sty["sliderCarousel__slider"],
          speed: 7000
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "currentSlide",
              plasmicStateName: "sliderCarousel.currentSlide"
            }
          ],

          [],
          SliderWrapper_Helpers ?? {},
          child$Props
        );
        return (
          <SliderWrapper
            data-plasmic-name={"sliderCarousel"}
            data-plasmic-override={overrides.sliderCarousel}
            {...child$Props}
          >
            <PlasmicLink__
              data-plasmic-name={"link"}
              data-plasmic-override={overrides.link}
              className={classNames(projectcss.all, projectcss.a, sty.link)}
              platform={"react"}
            >
              <PlasmicImg__
                data-plasmic-name={"hos1"}
                data-plasmic-override={overrides.hos1}
                alt={""}
                className={classNames(sty.hos1, "hospital-images")}
                displayHeight={"15vw"}
                displayMaxHeight={"none"}
                displayMaxWidth={"15vw"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"50vw"}
                height={"15vw"}
                src={{
                  src: image2Mg8N0AfDxjf4,
                  fullWidth: 270,
                  fullHeight: 270,
                  aspectRatio: undefined
                }}
                width={"15vw"}
              />
            </PlasmicLink__>
            <PlasmicImg__
              data-plasmic-name={"hos3"}
              data-plasmic-override={overrides.hos3}
              alt={""}
              className={classNames(sty.hos3)}
              displayHeight={"15vw"}
              displayMaxHeight={"none"}
              displayMaxWidth={"15vw"}
              displayMinHeight={"0"}
              displayMinWidth={"260px"}
              displayWidth={"52vw"}
              src={{
                src: image5GlOn2FcWZsY,
                fullWidth: 267,
                fullHeight: 265,
                aspectRatio: undefined
              }}
            />

            <PlasmicImg__
              data-plasmic-name={"hos32"}
              data-plasmic-override={overrides.hos32}
              alt={""}
              className={classNames(sty.hos32)}
              displayHeight={"15vw"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"483px"}
              src={{
                src: image2Mg8N0AfDxjf4,
                fullWidth: 270,
                fullHeight: 270,
                aspectRatio: undefined
              }}
            />

            <PlasmicImg__
              data-plasmic-name={"hos33"}
              data-plasmic-override={overrides.hos33}
              alt={""}
              className={classNames(sty.hos33)}
              displayHeight={"15vw"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"15vw"}
              src={{
                src: image2Mg8N0AfDxjf4,
                fullWidth: 270,
                fullHeight: 270,
                aspectRatio: undefined
              }}
            />

            <PlasmicImg__
              data-plasmic-name={"hos34"}
              data-plasmic-override={overrides.hos34}
              alt={""}
              className={classNames(sty.hos34)}
              displayHeight={"15vw"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"15vw"}
              src={{
                src: image2Mg8N0AfDxjf4,
                fullWidth: 270,
                fullHeight: 270,
                aspectRatio: undefined
              }}
            />
          </SliderWrapper>
        );
      })()}
    </Section>
  );
}

const PlasmicDescendants = {
  carouselBody: [
    "carouselBody",
    "sliderCarousel",
    "link",
    "hos1",
    "hos3",
    "hos32",
    "hos33",
    "hos34"
  ],

  sliderCarousel: [
    "sliderCarousel",
    "link",
    "hos1",
    "hos3",
    "hos32",
    "hos33",
    "hos34"
  ],

  link: ["link", "hos1"],
  hos1: ["hos1"],
  hos3: ["hos3"],
  hos32: ["hos32"],
  hos33: ["hos33"],
  hos34: ["hos34"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCarousel__ArgProps,
          internalVariantPropNames: PlasmicCarousel__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCarousel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "carouselBody") {
    func.displayName = "PlasmicCarousel";
  } else {
    func.displayName = `PlasmicCarousel.${nodeName}`;
  }
  return func;
}

export const PlasmicCarousel = Object.assign(
  // Top-level PlasmicCarousel renders the root element
  makeNodeComponent("carouselBody"),
  {
    // Helper components rendering sub-elements
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    link: makeNodeComponent("link"),
    hos1: makeNodeComponent("hos1"),
    hos3: makeNodeComponent("hos3"),
    hos32: makeNodeComponent("hos32"),
    hos33: makeNodeComponent("hos33"),
    hos34: makeNodeComponent("hos34"),
    // Metadata about props expected for PlasmicCarousel
    internalVariantProps: PlasmicCarousel__VariantProps,
    internalArgProps: PlasmicCarousel__ArgProps
  }
);

export default PlasmicCarousel;
/* prettier-ignore-end */
