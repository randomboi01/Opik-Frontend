// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9WZxc9ETCwDp4rSGaS5CbS
// Component: 4wyMl17eEwGh
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  hasVariant,
  initializeCodeComponentStates,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Section from "../../Section"; // plasmic-import: rgiRB26vdynw/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import { useScreenVariants as useScreenVariants_5FfeMn0I1Ziv } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 5FfeMN0i1Ziv/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: 9WZxc9ETCwDp4rSGaS5CbS/projectcss
import sty from "./PlasmicCarousel.module.css"; // plasmic-import: 4wyMl17eEwGh/css
import image2Mg8N0AfDxjf4 from "./images/image2.png"; // plasmic-import: MG8n0AfDxjf4/picture

createPlasmicElementProxy;

export const PlasmicCarousel__VariantProps = new Array();

export const PlasmicCarousel__ArgProps = new Array();

const $$ = {};

function PlasmicCarousel__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,
        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_5FfeMn0I1Ziv()
  });
  return (
    <Section
      data-plasmic-name={"carouselBody"}
      data-plasmic-override={overrides.carouselBody}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.carouselBody)}
      size={
        hasVariant(globalVariants, "screen", "mobileOnly")
          ? "mobile"
          : undefined
      }
    >
      <div className={classNames(projectcss.all, sty.freeBox__gjF9Y)}>
        <h1
          data-plasmic-name={"h1"}
          data-plasmic-override={overrides.h1}
          className={classNames(
            projectcss.all,
            projectcss.h1,
            projectcss.__wab_text,
            sty.h1
          )}
        >
          {"Our Partners"}
        </h1>
        {(() => {
          const child$Props = {
            arrowColor: "#000000",
            autoplay: true,
            autoplaySpeed: 1000,
            beforeChange: generateStateOnChangePropForCodeComponents(
              $state,
              "currentSlide",
              ["sliderCarousel", "currentSlide"],
              SliderWrapper_Helpers
            ),
            centerMode: true,
            className: classNames("__wab_instance", sty.sliderCarousel),
            fade: false,
            initialSlide: generateStateValueProp($state, [
              "sliderCarousel",
              "currentSlide"
            ]),
            pauseOnHover: false,
            ref: ref => {
              $refs["sliderCarousel"] = ref;
            },
            sliderScopeClassName: sty["sliderCarousel__slider"],
            slidesPerRow: 3
          };
          initializeCodeComponentStates(
            $state,
            [
              {
                name: "currentSlide",
                plasmicStateName: "sliderCarousel.currentSlide"
              }
            ],

            [],
            SliderWrapper_Helpers ?? {},
            child$Props
          );
          return (
            <SliderWrapper
              data-plasmic-name={"sliderCarousel"}
              data-plasmic-override={overrides.sliderCarousel}
              {...child$Props}
            >
              <div className={classNames(projectcss.all, sty.freeBox__wbhgI)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___4E462)}
                  displayHeight={"368px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={
                    "https://static1.plasmic.app/components/react-slick/slide1.png"
                  }
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__xGePh)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__bhd3L)}
                  displayHeight={"368px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={
                    "https://static1.plasmic.app/components/react-slick/slide2.png"
                  }
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__qz7Pm)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__lrEdn)}
                  displayHeight={"368px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={
                    "https://static1.plasmic.app/components/react-slick/slide3.png"
                  }
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___5UGAd)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__rQNgK)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "368px"
                      : "368px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "100%"
                      : "100%"
                  }
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={{
                    src: image2Mg8N0AfDxjf4,
                    fullWidth: 270,
                    fullHeight: 270,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__nrhoq)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__zecj1)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "368px"
                      : "368px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "100%"
                      : "100%"
                  }
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={{
                    src: image2Mg8N0AfDxjf4,
                    fullWidth: 270,
                    fullHeight: 270,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__uiZ5G)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__ryEjU)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "368px"
                      : "368px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "100%"
                      : "100%"
                  }
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={{
                    src: image2Mg8N0AfDxjf4,
                    fullWidth: 270,
                    fullHeight: 270,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__rlhzl)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__dqeBx)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "368px"
                      : "368px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "100%"
                      : "100%"
                  }
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={{
                    src: image2Mg8N0AfDxjf4,
                    fullWidth: 270,
                    fullHeight: 270,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__tTaL)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__fueot)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "368px"
                      : "368px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "100%"
                      : "100%"
                  }
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={{
                    src: image2Mg8N0AfDxjf4,
                    fullWidth: 270,
                    fullHeight: 270,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__rsOx)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__ycLPm)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "368px"
                      : "368px"
                  }
                  displayMaxHeight={"none"}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "100%"
                      : "100%"
                  }
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={{
                    src: image2Mg8N0AfDxjf4,
                    fullWidth: 270,
                    fullHeight: 270,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </SliderWrapper>
          );
        })()}
      </div>
    </Section>
  );
}

const PlasmicDescendants = {
  carouselBody: ["carouselBody", "h1", "sliderCarousel"],
  h1: ["h1"],
  sliderCarousel: ["sliderCarousel"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCarousel__ArgProps,
          internalVariantPropNames: PlasmicCarousel__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCarousel__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "carouselBody") {
    func.displayName = "PlasmicCarousel";
  } else {
    func.displayName = `PlasmicCarousel.${nodeName}`;
  }
  return func;
}

export const PlasmicCarousel = Object.assign(
  // Top-level PlasmicCarousel renders the root element
  makeNodeComponent("carouselBody"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    // Metadata about props expected for PlasmicCarousel
    internalVariantProps: PlasmicCarousel__VariantProps,
    internalArgProps: PlasmicCarousel__ArgProps
  }
);

export default PlasmicCarousel;
/* prettier-ignore-end */
