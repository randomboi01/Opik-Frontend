// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9WZxc9ETCwDp4rSGaS5CbS
// Component: IOoV5s6kluYE
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Logo from "../../Logo"; // plasmic-import: T9gpS9Fk8hi0/component
import Button from "../../Button"; // plasmic-import: FAL88-jyCKI_/component
import { useScreenVariants as useScreenVariants_5FfeMn0I1Ziv } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 5FfeMN0i1Ziv/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9WZxc9ETCwDp4rSGaS5CbS/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: IOoV5s6kluYE/css

createPlasmicElementProxy;

export const PlasmicNavbar__VariantProps = new Array();

export const PlasmicNavbar__ArgProps = new Array();

const $$ = {};

function PlasmicNavbar__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_5FfeMn0I1Ziv()
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__m3Yqy)}
      >
        <Logo
          data-plasmic-name={"opik"}
          data-plasmic-override={overrides.opik}
          className={classNames("__wab_instance", sty.opik)}
          smallLogo={
            hasVariant(globalVariants, "screen", "tabletsOnly")
              ? undefined
              : undefined
          }
        />

        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__lwxV)}
        >
          <Button
            className={classNames("__wab_instance", sty.button__rZSxa)}
            color={"navLink"}
            endIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__dkGwl)}
                role={"img"}
              />
            }
            link={"#"}
            startIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__x7Bcj)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            <div
              data-plasmic-name={"productDescription"}
              data-plasmic-override={overrides.productDescription}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.productDescription
              )}
            >
              {"Product"}
            </div>
          </Button>
          <Button
            data-plasmic-name={"purchaseProduct"}
            data-plasmic-override={overrides.purchaseProduct}
            className={classNames("__wab_instance", sty.purchaseProduct)}
            color={"navLink"}
            endIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__dyvna)}
                role={"img"}
              />
            }
            link={"#"}
            startIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__cQjMg)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wSpz9
              )}
            >
              {"Purchase"}
            </div>
          </Button>
          <Button
            data-plasmic-name={"accomplishments"}
            data-plasmic-override={overrides.accomplishments}
            className={classNames("__wab_instance", sty.accomplishments)}
            color={"navLink"}
            endIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__w1QaT)}
                role={"img"}
              />
            }
            link={"#"}
            startIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__gj66Z)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dK8AJ
              )}
            >
              {"Accomplishments"}
            </div>
          </Button>
          <Button
            data-plasmic-name={"contactUs"}
            data-plasmic-override={overrides.contactUs}
            className={classNames("__wab_instance", sty.contactUs)}
            color={"navLink"}
            endIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__yAo9K)}
                role={"img"}
              />
            }
            link={"#"}
            startIcon={
              <svg
                className={classNames(projectcss.all, sty.svg___2Ur7W)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            <div
              data-plasmic-name={"contactUs2"}
              data-plasmic-override={overrides.contactUs2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.contactUs2
              )}
            >
              {"Contact Us"}
            </div>
          </Button>
        </Stack__>
        <div className={classNames(projectcss.all, sty.freeBox__vU7X)}>
          <Button
            className={classNames("__wab_instance", sty.button__sG7Pa)}
            color={"navLink"}
            endIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__qjLpC)}
                role={"img"}
              />
            }
            link={`/new-page`}
            startIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__gZr90)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___4IrJz
              )}
            >
              {"Log in"}
            </div>
          </Button>
          <Button
            className={classNames("__wab_instance", sty.button__nPneo)}
            color={"navLinkBlue"}
            endIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__oCK)}
                role={"img"}
              />
            }
            link={"#"}
            startIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__uTnl)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mNzl1
              )}
            >
              {"Register"}
            </div>
          </Button>
        </div>
      </Stack__>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "opik",
    "productDescription",
    "purchaseProduct",
    "accomplishments",
    "contactUs",
    "contactUs2"
  ],

  opik: ["opik"],
  productDescription: ["productDescription"],
  purchaseProduct: ["purchaseProduct"],
  accomplishments: ["accomplishments"],
  contactUs: ["contactUs", "contactUs2"],
  contactUs2: ["contactUs2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavbar__ArgProps,
          internalVariantPropNames: PlasmicNavbar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    opik: makeNodeComponent("opik"),
    productDescription: makeNodeComponent("productDescription"),
    purchaseProduct: makeNodeComponent("purchaseProduct"),
    accomplishments: makeNodeComponent("accomplishments"),
    contactUs: makeNodeComponent("contactUs"),
    contactUs2: makeNodeComponent("contactUs2"),
    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
