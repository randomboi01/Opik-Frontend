// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9WZxc9ETCwDp4rSGaS5CbS
// Component: lnR5QM188Nfg
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Navbar from "../../Navbar"; // plasmic-import: IOoV5s6kluYE/component
import "@plasmicapp/react-web/lib/plasmic.css";
import sty from "./PlasmicNavbar2.module.css"; // plasmic-import: lnR5QM188Nfg/css

createPlasmicElementProxy;

export const PlasmicNavbar2__VariantProps = new Array();

export const PlasmicNavbar2__ArgProps = new Array();

const $$ = {};

function PlasmicNavbar2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <Navbar
      data-plasmic-name={"navbar"}
      data-plasmic-override={overrides.navbar}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.navbar)}
    />
  );
}

const PlasmicDescendants = {
  navbar: ["navbar"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavbar2__ArgProps,
          internalVariantPropNames: PlasmicNavbar2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavbar2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "navbar") {
    func.displayName = "PlasmicNavbar2";
  } else {
    func.displayName = `PlasmicNavbar2.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar2 = Object.assign(
  // Top-level PlasmicNavbar2 renders the root element
  makeNodeComponent("navbar"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicNavbar2
    internalVariantProps: PlasmicNavbar2__VariantProps,
    internalArgProps: PlasmicNavbar2__ArgProps
  }
);

export default PlasmicNavbar2;
/* prettier-ignore-end */
