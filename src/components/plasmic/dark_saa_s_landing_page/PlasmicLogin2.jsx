// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9WZxc9ETCwDp4rSGaS5CbS
// Component: y5pZtcVsBZ6W
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangePropForCodeComponents,
  initializeCodeComponentStates,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdPassword } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 9WZxc9ETCwDp4rSGaS5CbS/projectcss
import sty from "./PlasmicLogin2.module.css"; // plasmic-import: y5pZtcVsBZ6W/css

createPlasmicElementProxy;

export const PlasmicLogin2__VariantProps = new Array();

export const PlasmicLogin2__ArgProps = new Array();

const $$ = {};

function PlasmicLogin2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      {(() => {
        const child$Props = {
          className: classNames("__wab_instance", sty.form),
          extendedOnValuesChange: generateStateOnChangePropForCodeComponents(
            $state,
            "value",
            ["form", "value"],
            FormWrapper_Helpers
          ),
          formItems: undefined,
          labelCol: (() => {
            const __composite = { span: 8, horizontalOnly: null };
            __composite["horizontalOnly"] = true;
            return __composite;
          })(),
          layout: "vertical",
          mode: undefined,
          onIsSubmittingChange: generateStateOnChangePropForCodeComponents(
            $state,
            "isSubmitting",
            ["form", "isSubmitting"],
            FormWrapper_Helpers
          ),
          ref: ref => {
            $refs["form"] = ref;
          },
          wrapperCol: { span: 16, horizontalOnly: true }
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "value",
              plasmicStateName: "form.value"
            },
            {
              name: "isSubmitting",
              plasmicStateName: "form.isSubmitting"
            }
          ],

          [],
          FormWrapper_Helpers ?? {},
          child$Props
        );
        return (
          <FormWrapper
            data-plasmic-name={"form"}
            data-plasmic-override={overrides.form}
            {...child$Props}
          >
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__mn3N5)}
              label={"Email"}
              name={"email"}
              valuePropName={``}
            >
              <AntdInput className={classNames("__wab_instance", sty.input)} />
            </FormItemWrapper>
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__lWyac)}
              label={"Password"}
              name={"password"}
            >
              <AntdPassword
                className={classNames("__wab_instance", sty.passwordInput)}
              />
            </FormItemWrapper>
            <AntdButton
              className={classNames("__wab_instance", sty.button)}
              shape={"default"}
              size={"medium"}
              submitsForm={true}
              type={"default"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {"Submit"}
              </div>
            </AntdButton>
          </FormWrapper>
        );
      })()}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "form", "input", "passwordInput", "button", "text"],
  form: ["form", "input", "passwordInput", "button", "text"],
  input: ["input"],
  passwordInput: ["passwordInput"],
  button: ["button", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLogin2__ArgProps,
          internalVariantPropNames: PlasmicLogin2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLogin2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLogin2";
  } else {
    func.displayName = `PlasmicLogin2.${nodeName}`;
  }
  return func;
}

export const PlasmicLogin2 = Object.assign(
  // Top-level PlasmicLogin2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    passwordInput: makeNodeComponent("passwordInput"),
    button: makeNodeComponent("button"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicLogin2
    internalVariantProps: PlasmicLogin2__VariantProps,
    internalArgProps: PlasmicLogin2__ArgProps
  }
);

export default PlasmicLogin2;
/* prettier-ignore-end */
